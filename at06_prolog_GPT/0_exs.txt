Fundamentos (1‚Äì10): Fatos, regras simples e unifica√ß√£o

    Defina alguns fatos sobre parentesco (pai, m√£e, irm√£o) e crie regras como avo/2, irmao/2, tio/2.

    Verifique se uma pessoa √© maior de idade. Defina fatos com idade/2 e uma regra maior_de_idade/1.

    Crie um predicado que verifica se algu√©m √© aluno de um curso. Ex: aluno(joao, matematica).

    Defina um conjunto de livros e seus autores. Fa√ßa uma regra que retorna se um autor escreveu um livro.

    Crie um predicado que define se dois n√∫meros s√£o iguais. Use apenas unifica√ß√£o, sem operadores aritm√©ticos.

    Implemente um predicado quadrado/2 que relaciona um n√∫mero ao seu quadrado.

    Crie um predicado gosta/2 e amizade/2. Jo√£o gosta de Maria, Maria gosta de Ana. Jo√£o √© amigo de Ana?

    Implemente uma regra eh_maior/2 que compara dois n√∫meros e diz se o primeiro √© maior.

    Fa√ßa um predicado que define se uma letra √© vogal.

    Crie uma base de fatos animal/2 (animal, tipo) e uma regra mamifero/1.

üü° Listas e estrutura√ß√£o (11‚Äì20): Head, tail, recurs√£o simples

    Implemente um predicado tamanho/2 que retorna o tamanho de uma lista.

    Crie um predicado soma_lista/2 que soma os elementos de uma lista.

    Crie pertence/2 que verifica se um elemento est√° em uma lista.

    Implemente ultimo/2 que retorna o √∫ltimo elemento de uma lista.

    Crie concatena/3 para concatenar duas listas.

    Escreva um predicado reverter/2 que inverte uma lista.

    Implemente par/1 e use-o para filtrar os n√∫meros pares de uma lista.

    Crie maior_elemento/2 que retorna o maior elemento de uma lista.

    Implemente ocorrencias/3 que conta quantas vezes um elemento aparece em uma lista.

    Fa√ßa duplica/2, que recebe uma lista e devolve outra onde cada elemento aparece duas vezes seguidas.

üîµ Racioc√≠nio e recurs√£o intermedi√°ria (21‚Äì30): Predicados compostos, busca, l√≥gica indutiva

    Implemente todos_pares/1 que verifica se todos os elementos da lista s√£o pares.

    Crie intersecao/3 que retorna os elementos comuns entre duas listas.

    Implemente remover/3 que remove todas as ocorr√™ncias de um elemento de uma lista.